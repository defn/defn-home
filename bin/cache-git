#!/usr/bin/env bash

function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"

  exec 9>&1 1>&2
  unset GIT_SSH GIT_DIR
  unset GIT_WORK_TREE GIT_PREFIX

  local ssh_remote="$1"; shift
  local hst_remote="${ssh_remote##*@}"

  eval set -- $1
  local cmd_git="$1"

  case "$cmd_git" in
    git-upload-pack)
      local nm_user="$(echo "$2" | cut -d/ -f1)"
      local nm_repo="$(echo "$2" | cut -d/ -f2)"

      local pth_cache="${BASEBOX_CACHE:-/vagrant}/cache/git/$hst_remote"
      if [[ -z "${GIT_CACHE}" && ! -f ~/.git_cache ]]; then
        echo "INFO: updating git cache for ${pth_cache}/$nm_user/$nm_repo" 1>&2
        if [[ ! -d "${pth_cache}/$nm_user/$nm_repo" ]]; then
          mkdir -p "${pth_cache}/$nm_user"
          git clone --bare --mirror \
            "${ssh_remote}:$nm_user/$nm_repo" "${pth_cache}/$nm_user/$nm_repo"
        fi

        pushd "${pth_cache}/$nm_user/$nm_repo" >/dev/null
        git fetch --all
        popd >/dev/null
      fi

      local hst_cache="localhost"
      if [[ -n "${http_proxy:-}" ]]; then
        hst_cache="${http_proxy##*/}"
        hst_cache="${hst_cache%%:*}"
      fi
      exec /usr/bin/ssh -o StrictHostKeyChecking=no -l defn "$hst_cache" "cd ${pth_cache} && $*" 1>&9 # TODO better way to find user@cache
      ;;

    *)
      exec /usr/bin/ssh "$ssh_remote" "$@" 1>&9
      ;;
  esac
}

main "$@"
